# -*- coding: utf-8 -*-
"""ChatBot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j32fcvLhu5_unLzy5ZEPjftotSfJBnOm
"""

import os
from langgraph.graph import StateGraph, END
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.messages import HumanMessage

# Set Gemini API Key
os.environ["GOOGLE_API_KEY"] = "AIzaSyDfSI0PTT7YNdhV14DtgdzRZoZbMkwpp8c"

# Initialize LLM
llm = ChatGoogleGenerativeAI(model="models/gemini-1.5-flash-latest", temperature=0.3)

# Step 1: Get User Type
def get_user_type(state: dict) -> dict:
    user_type = input("🌱 Are you a 'Homeowner' or 'Business'? ").strip().lower()
    state["user_type"] = user_type
    return state

# Step 2: Appliance Survey
def ask_appliance_data(state: dict) -> dict:
    print("🔌 Enter the number of appliances and their average star ratings (1–5):")

    state["lights"] = input("Number of Lights: ")
    state["lights_star"] = input("Avg Star Rating of Lights (1–5): ")

    state["fans"] = input("Number of Fans: ")
    state["fans_star"] = input("Avg Star Rating of Fans (1–5): ")

    state["acs"] = input("Number of ACs: ")
    state["acs_star"] = input("Avg Star Rating of ACs (1–5): ")

    state["chimneys"] = input("Number of Chimneys: ")
    state["chimneys_star"] = input("Avg Star Rating of Chimneys (1–5): ")

    state["fridges"] = input("Number of Fridges: ")
    state["fridges_star"] = input("Avg Star Rating of Fridges (1–5): ")

    state["washing_machines"] = input("Number of Washing Machines: ")
    state["washing_machines_star"] = input("Avg Star Rating of Washing Machines (1–5): ")

    return state

# Step 3: Ask for Monthly Usage
def ask_energy_usage(state: dict) -> dict:
    state["usage_kwh"] = input("⚡ Estimated monthly electricity usage (kWh): ")
    return state

# Step 4: Classify Usage
def classify_usage(state: dict) -> dict:
    prompt = (
        "You are an energy expert. Classify electricity usage as Low, Moderate, or High.\n"
        f"User type: {state['user_type']}\n"
        f"Monthly usage: {state['usage_kwh']} kWh\n"
        f"Appliances:\n"
        f"Lights: {state['lights']} ({state['lights_star']}★), Fans: {state['fans']} ({state['fans_star']}★),\n"
        f"ACs: {state['acs']} ({state['acs_star']}★), Chimneys: {state['chimneys']} ({state['chimneys_star']}★),\n"
        f"Fridges: {state['fridges']} ({state['fridges_star']}★), Washing Machines: {state['washing_machines']} ({state['washing_machines_star']}★).\n"
        "Respond with only one word.")
    response = llm.invoke([HumanMessage(content=prompt)])
    state["usage_level"] = response.content.strip()
    print(f"🔍 Usage classified as: {state['usage_level']}")
    return state

# Step 5: Router
def route_user(state: dict) -> str:
    if "home" in state["user_type"]:
        return "home_recommendations"
    elif "business" in state["user_type"]:
        return "business_recommendations"
    return "general_advice"

# Step 6a: Home Recommendations
def home_recommendations(state: dict) -> dict:
    prompt = (
        "You are an assistant helping a homeowner reduce energy use.\n"
        f"Monthly usage: {state['usage_kwh']} kWh ({state['usage_level']}).\n"
        "Appliance Info:\n"
        f"Lights: {state['lights']} ({state['lights_star']}★), Fans: {state['fans']} ({state['fans_star']}★),\n"
        f"ACs: {state['acs']} ({state['acs_star']}★), Chimneys: {state['chimneys']} ({state['chimneys_star']}★),\n"
        f"Fridges: {state['fridges']} ({state['fridges_star']}★), Washing Machines: {state['washing_machines']} ({state['washing_machines_star']}★).\n"
        "Give targeted tips to reduce consumption, suggest better appliances or behavior changes, and offer renewable energy suggestions."
    )
    response = llm.invoke([HumanMessage(content=prompt)])
    state["recommendations"] = response.content
    return state

# Step 6b: Business Recommendations (same structure if needed)
def business_recommendations(state: dict) -> dict:
    prompt = (
        "You are an energy consultant for a business.\n"
        f"Monthly usage: {state['usage_kwh']} kWh ({state['usage_level']}).\n"
        "Appliance Info:\n"
        f"Lights: {state['lights']} ({state['lights_star']}★), Fans: {state['fans']} ({state['fans_star']}★),\n"
        f"ACs: {state['acs']} ({state['acs_star']}★), Chimneys: {state['chimneys']} ({state['chimneys_star']}★),\n"
        f"Fridges: {state['fridges']} ({state['fridges_star']}★), Washing Machines: {state['washing_machines']} ({state['washing_machines_star']}★).\n"
        "Provide optimization tips, energy-saving policies, and recommend commercial renewable options. give answer in short in 4 to 5 lines"
    )
    response = llm.invoke([HumanMessage(content=prompt)])
    state["recommendations"] = response.content
    return state

# Step 6c: Fallback
def general_advice(state: dict) -> dict:
    state["recommendations"] = "Couldn't determine user type. Please start again with 'Homeowner' or 'Business'."
    return state

# LangGraph Setup
builder = StateGraph(dict)
builder.set_entry_point("get_user_type")
builder.add_node("get_user_type", get_user_type)
builder.add_node("ask_appliance_data", ask_appliance_data)
builder.add_node("ask_usage", ask_energy_usage)
builder.add_node("classify", classify_usage)
builder.add_node("home_recommendations", home_recommendations)
builder.add_node("business_recommendations", business_recommendations)
builder.add_node("general_advice", general_advice)

builder.add_edge("get_user_type", "ask_appliance_data")
builder.add_edge("ask_appliance_data", "ask_usage")
builder.add_edge("ask_usage", "classify")
builder.add_conditional_edges("classify", route_user, {
    "home_recommendations": "home_recommendations",
    "business_recommendations": "business_recommendations",
    "general_advice": "general_advice"
})
builder.add_edge("home_recommendations", END)
builder.add_edge("business_recommendations", END)
builder.add_edge("general_advice", END)

graph = builder.compile()

# Run
final_state = graph.invoke({})
print("\n💡 Personalized Energy Tips:\n" + final_state["recommendations"])